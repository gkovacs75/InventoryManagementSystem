@inject NavigationManager NavigationManager
@inject IDeleteProductUseCase DeleteProductUseCase

@if (Product != null)
{
	<tr>
		<td>@Product.ProductName</td>
		<td>@Product.Quantity</td>
		<td>@Product.Price.ToString("c")</td>
		<td>
			<button type="button" class="btn btn-light" @onclick="@( ()=>EditProduct(Product.ProductId)  )">Edit</button>
			<button type="button" class="btn btn-light" @onclick="@(async ()=>await DeleteProduct(Product)  )">Delete</button>
		</td>
	</tr>
}

@code {

	[Parameter]
	public EventCallback OnProductDeleted { get; set; }

	[Parameter]
	public Product? Product { get; set; }

	private void EditProduct(int productId)
	{
		NavigationManager.NavigateTo($"/editproduct/{productId}");
	}

	private async Task DeleteProduct(Product product)
	{
		await DeleteProductUseCase.ExecuteAsync(product.ProductId);

		// Notify parent so it reloads products
		await OnProductDeleted.InvokeAsync();
	}
}
