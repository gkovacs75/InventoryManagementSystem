@page "/sell"
@inject ISellProductUseCase SellProductUseCase

<ErrorMessageComponent ErrorMessage="@errorMessage"></ErrorMessageComponent>

<h3>Sell Product</h3>
<br />

@if (sellViewModel != null)
{
	<EditForm Model="sellViewModel" OnValidSubmit="OnValidSubmitAsync">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>

		<div class="form-group">
			<label for="po">Sales Order Number</label>
			<InputText id="po" @bind-Value="sellViewModel.SalesOrderNumber" class="form-control"></InputText>
		</div>

		<div class="form-group">
			<label for="inv">Product to Sell</label>
			<ViewProductsComponent OnSelectProduct="OnSelectProduct"
							   DisplaySearchResults="true">
			</ViewProductsComponent>
			<InputText id="inv" class="form-control" @bind-Value="sellViewModel.ProductName" disabled></InputText>
			<input type="hidden" value=@sellViewModel?.ProductId />
		</div>

		<div class="form-group">
			<label for="price">Price</label>
			<InputNumber id="price" @bind-Value="sellViewModel.ProductPrice" class="form-control"></InputNumber>
		</div>

		<div class="form-group">
			<label for="qty">Quantity</label>
			<InputNumber id="qty" @bind-Value="sellViewModel.QuantityToSell" class="form-control"></InputNumber>
		</div>

		<button type="submit" class="btn btn-primary">Produce</button>

	</EditForm>
}

@code {

	SellViewModel sellViewModel = new SellViewModel();
	private Product selectedProduct;
	private string errorMessage;

	private async Task OnValidSubmitAsync()
	{
		if(this.selectedProduct.Quantity<this.sellViewModel.QuantityToSell)
		{
			this.errorMessage = $"The quantity of the product is not enough. Only {this.selectedProduct.Quantity} are available.";
			return;
		}
		else
		{
			this.errorMessage = String.Empty;
		}

		await SellProductUseCase.ExecuteAsync(this.sellViewModel.SalesOrderNumber, this.selectedProduct, this.sellViewModel.QuantityToSell, "Gabor");

		this.sellViewModel = new SellViewModel();
		this.selectedProduct = null;
	}

	private void OnSelectProduct(Product product)
	{
		this.selectedProduct = product;
		sellViewModel.ProductId = product.ProductId;
		sellViewModel.ProductName = product.ProductName;
		sellViewModel.ProductPrice = product.Price;
	}
}
